#!/usr/bin/python3
#     =========================================================================
#     hii - command-line interactive tool and service for hydra
    
#     Copyright (c) Galen Curwen-McAdams

#     This Source Code Form is subject to the terms of the Mozilla Public
#     License, v. 2.0. If a copy of the MPL was not distributed with this
#     file, You can obtain one at http://mozilla.org/MPL/2.0/.
#     =========================================================================

import _hydra_ctypes 
import sys
#import czmq as module 
#due to ctypes type error with single file
sys.path.insert(0, '.')
import czmq
import ctypes
import time
from PIL import Image,ImageDraw,ImageFont
import io
import random, string
from curtsies import Input
import os
import argparse
import sys
import textwrap
import hashlib

def calc_sha1(hash_this):
    # return sha1 in uppercase hex
    try:
        hash_this = hash_this.encode()
    except AttributeError:
        pass

    sha1_hash = hashlib.sha1()
    sha1_hash.update(hash_this)
    return sha1_hash.hexdigest().upper()

def print_feedback(message):
    print(message)

def print_post(post,truncate_contents=100):
    if truncate_contents <= 0:
        truncate_contents = len(post['contents'])
        truncated_sign = "\n               \n            [Contents size: {}]".format(len(post['contents']))
    else:
        truncated_sign = "\n            ...\n            [Contents size: {}]".format(len(post['contents']))

    print()
    print("ident:      {}".format(post['ident']))
    print("subject:    {}".format(post['subject']))
    print("contents:   {}{}".format(post['contents'][0:truncate_contents],truncated_sign))
    print()
    print()

def generate_words(word_count=3):
    words = []
    try:
        with open('/usr/share/dict/words','r') as f:
            lines = f.read().splitlines()
            words = random.sample(lines,word_count)
    except FileNotFoundError as ex:
        print(ex)
        words = ['words','not','found']
    return ' '.join(words)

def generate_image_bytes(caption_overlay=None,display_created_image=False):
    if caption_overlay is None:
        caption_overlay = ""

    im = Image.new('RGBA', (500, 500), (0, 0, 0, 0))
    draw = ImageDraw.Draw(im)
    try:
        font = ImageFont.truetype("unifont.ttf", 30)
        draw.text((0, 0), caption_overlay, font=font, fill=(255,255,255))
    except OSError as ex:
        try:
            font = ImageFont.truetype("FreeSerif.ttf", 30)
            draw.text((0, 0), caption_overlay, font=font, fill=(255,255,255))
        except OSError as ex:
            #Pillow on raspberry pi cannot seem to resolve font paths
            #so use absolute path, this is brittle
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/freefont/FreeSerif.ttf", 30)
                draw.text((0, 0), caption_overlay, font=font, fill=(255,255,255))
            except OSError as ex:
                font = ImageFont.load_default()
                draw.text((0, 0), caption_overlay, font=font, fill=(255,255,255))
                print(ex)
            print(ex)



    stream = io.BytesIO()
    im.save(stream,format='JPEG')
    if display_created_image is True:
        im.show()
    im.close()
    return stream.getvalue()

def make_string_post(service,stdout_char_cutoff=100,**post_kwargs):

    post = {}
    post['subject'] = generate_words()
    post['mime_type']="text/plain"
    post['contents'] = generate_words(20)
    post['parent_id']=""
    post.update(post_kwargs)

    # hydra returns a post identifier
    post['ident'] = hydra_string_post(service,**post).decode()
    print_post(post,stdout_char_cutoff)
    return post

def make_chunk_post(service,display_created_image=False,stdout_char_cutoff=100,**post_kwargs):

    post = {}
    post['mime_type'] = "image/jpeg"
    post['parent_id'] = ""
    post.update(post_kwargs)
    # generate image after updating post with
    # any passed in post kwargs
    # for now this means subject will always be
    # overlaid on image
    if not 'subject' in post:
        post['subject'] = generate_words()

    if not 'contents' in post:
        post['contents'] = generate_image_bytes(post['subject'])

    if display_created_image:
        im = Image.open(io.BytesIO(post['contents']))
        im.show()
        im.close()

    # hydra returns a post identifier
    post['ident'] = hydra_chunk_post(service,**post).decode()
    print_post(post,stdout_char_cutoff)
    return post

def hydra_string_post(service,*,subject,parent_id,mime_type,contents):
    try:
        contents = contents.encode()
    except AttributeError:
        #already encoded
        pass

    post_ident = service.store_string(subject.encode(),
                                    parent_id.encode(),
                                    mime_type.encode(),
                                    contents)
    return post_ident

def hydra_chunk_post(service,*,subject,parent_id,mime_type,contents,debug_to_file=False):
    try:
        contents = contents.encode()
    except AttributeError:
        pass

    #avoid zero-termination in contents
    contents_size = len(contents)
    p = ctypes.c_char_p(contents)
    p2 = ctypes.cast(p,ctypes.POINTER(ctypes.c_char))
    #print(ctypes.string_at(p,size=contents_size))

    #vbindiff useful for debugging output
    if debug_to_file:
        #dump initial arg bytes and pointed bytes
        with open("py_arg_bytes_value.foo",'wb+') as f:
            f.write(contents)
        with open("c_pointer_bytes_value.foo",'wb+') as f:
            f.write(ctypes.string_at(p,size=contents_size))

    chunk = czmq.Zchunk(ctypes.string_at(p,size=contents_size),contents_size)

    #check that zchunk contains correct data
    # before store_chunk call
    assert chunk.digest().decode() == calc_sha1(contents)

    post_ident = service.store_chunk(subject.encode(),
                                    parent_id.encode(),
                                    mime_type.encode(),
                                    chunk)
    return post_ident

def end_service(service):
    #call destructors
    print("ending: {}".format(service))
    del service

def hydra_loop(binding,start_message=""):
    loop_exit_bindings = (u'q',u'Q',u'<ESC>', u'<Ctrl-d>')

    #init hydra service
    directory = b'.hydra'
    hydra_service = _hydra_ctypes.Hydra(directory)
    hydra_service.start()

    #config
    tweaks = {}
    tweaks['stdout_max_chars'] = 100
    tweaks['preview_created'] = False
    #print after hydra_service has logged ledger contents to stdout
    print_feedback(start_message)
    with Input(keynames='curtsies') as input_generator:
        for e in Input():
            #run on any input
            if e in set(binding.values()):
                print(tweaks)
            elif e in loop_exit_bindings:
                pass
            else:
                print("** unbound key **")
                print("** showing help **")

                print_feedback(start_message)

            #handle bindings
            if e in loop_exit_bindings:
                end_service(hydra_service)
                sys.exit(0)

            elif e == binding['tweak_more_screen_bytes']:
                 tweaks['stdout_max_chars'] +=100

            elif e == binding['tweak_less_screen_bytes']:
                 tweaks['stdout_max_chars'] -=100

            elif e == binding['make_chunk_post']:
                make_chunk_post(hydra_service,
                                display_created_image=tweaks['preview_created'])

            elif e == binding['make_string_post']:
                make_string_post(hydra_service)

            elif e == binding['tweak_toggle_show_image']:
                tweaks['preview_created'] = not tweaks['preview_created']
            
            elif e == binding['tweak_show_helpme']:
                print_feedback(start_message)
    
def main(argv):
    binding = {}
    binding['make_chunk_post']          =  'c'
    binding['make_file_post']           =  'f (TODO)'
    binding['make_string_post']         =  'w'
    binding['tweak_toggle_show_image']      =  'z'
    binding['tweak_more_screen_bytes']  =  '<Ctrl-LEFT>'
    binding['tweak_less_screen_bytes']  =  '<Ctrl-RIGHT>'
    binding['tweak_show_helpme']            =  'h'

    cli_description = """
    Use hydra cffi bindings to start hydra process
    and generate posts using hydra_store_string

    syntax: hii [-h]
    Interactive Key Bindings:
        {make_chunk_post}:           image content post       (zchunk bytes)
        {make_file_post}:          file content post        (text/zpl) 
        {make_string_post}:           string content post      (random words string)
        {tweak_toggle_show_image}:           toggle image display     (default: False)
        {tweak_more_screen_bytes}:   increase stdout contents shown  (default: 100)
        {tweak_less_screen_bytes}:  decrease stdout contents shown  
        {tweak_show_helpme}:  print this  
        *up:         up id tree      (TODO)
        *down:       down selected id tree    (TODO)
        *left:       cycle selected branch id   (TODO)
        *right:      cycle selected branch id   (TODO)
        *space:      select selected (TODO)
        *bacspace:   select unassociated id (TODO)

        (q exits...)

    """.format(**binding)

    parser = argparse.ArgumentParser(description=cli_description,
                                    formatter_class=argparse.RawDescriptionHelpFormatter)
    args = parser.parse_args()  
    hydra_loop(binding,cli_description)
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv)
